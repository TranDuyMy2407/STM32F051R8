
Memory Configuration

Name             Origin             Length             Attributes
FLASH            0x08000000         0x00008000         xr
RAM              0x20000000         0x00001000         xrw
*default*        0x00000000         0xffffffff

Linker script and memory map


.text           0x08000000      0x440
 *(.vectors)
 .vectors       0x08000000       0xc0 output/startup_ARMCM0.o
                0x08000000                __Vectors
                0x080000c0                __Vectors_End = .
                0x080000c0                __Vectors_Size = (__Vectors_End - __Vectors)
                0x20000000                __end__ = .
 *(.text*)
 .text          0x080000c0       0x1c output/main.o
                0x080000c0                main
 .text          0x080000dc        0x4 output/startup_ARMCM0.o
                0x080000dc                Reset_Handler
 .text          0x080000e0      0x360 output/reg.o
                0x080000e0                Reserved_IRQHandler
                0x080000e6                NMI_Handler
                0x080000ec                HardFault_Handler
                0x080000f2                SVC_Handler
                0x080000f8                PendSV_Handler
                0x080000fe                SysTick_Handler
                0x08000104                pll_48_config
                0x080001ac                read_bit
                0x080001da                external_interrupt_init
                0x08000224                EXTI0_1_Handler
                0x0800025c                delay_ms
                0x080002b4                init_clk
                0x0800036c                pin_set
                0x080003d2                erase_flash
 *(.init)
 *(.fini)
 *(.rodata*)
 *(.eh_frame*)

.glue_7         0x08000440        0x0
 .glue_7        0x08000440        0x0 linker stubs

.glue_7t        0x08000440        0x0
 .glue_7t       0x08000440        0x0 linker stubs

.vfp11_veneer   0x08000440        0x0
 .vfp11_veneer  0x08000440        0x0 linker stubs

.v4_bx          0x08000440        0x0
 .v4_bx         0x08000440        0x0 linker stubs

.iplt           0x08000440        0x0
 .iplt          0x08000440        0x0 output/main.o

.rel.dyn        0x08000440        0x0
 .rel.iplt      0x08000440        0x0 output/main.o

.data           0x20000000        0x0
                0x20000000                __data_start__ = .
 *(vtable)
 *(.data*)
 .data          0x20000000        0x0 output/main.o
 .data          0x20000000        0x0 output/startup_ARMCM0.o
 .data          0x20000000        0x0 output/reg.o
                0x20000000                __data_end__ = .

.igot.plt       0x20000000        0x0
 .igot.plt      0x20000000        0x0 output/main.o

.bss            0x20000000        0x0
                0x20000000                . = ALIGN (0x4)
                0x20000000                __bss_start__ = .
 *(.bss*)
 .bss           0x20000000        0x0 output/main.o
 .bss           0x20000000        0x0 output/startup_ARMCM0.o
 .bss           0x20000000        0x0 output/reg.o
 *(COMMON)
                0x20000000                . = ALIGN (0x4)
                0x20000000                __bss_end__ = .

.heap           0x20000000      0x200
                0x20000000                __HeapBase = .
                0x20000000                __end__ = .
                0x20000000                end = __end__
 *(.heap*)
 .heap          0x20000000      0x200 output/startup_ARMCM0.o
                0x20000200                __HeapLimit = .

.stack_dummy    0x20000000      0x100
 *(.stack*)
 .stack         0x20000000      0x100 output/startup_ARMCM0.o
                0x20001000                __StackTop = (ORIGIN (RAM) + LENGTH (RAM))
                0x20000f00                __StackLimit = (__StackTop - SIZEOF (.stack_dummy))
                [!provide]                PROVIDE (__stack = __StackTop)
                0x00000001                ASSERT ((__StackLimit >= __HeapLimit), region RAM overflowed with stack)
LOAD output/main.o
LOAD output/startup_ARMCM0.o
LOAD output/reg.o
OUTPUT(output/stm32f0_discovery_gpio.elf elf32-littlearm)
LOAD linker stubs

.comment        0x00000000       0x4c
 .comment       0x00000000       0x4c output/main.o
                                 0x4d (size before relaxing)
 .comment       0x0000004c       0x4d output/reg.o

.ARM.attributes
                0x00000000       0x2a
 .ARM.attributes
                0x00000000       0x2c output/main.o
 .ARM.attributes
                0x0000002c       0x1b output/startup_ARMCM0.o
 .ARM.attributes
                0x00000047       0x2c output/reg.o
